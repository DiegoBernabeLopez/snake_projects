# As standard, snakemake workflows execute this snakefile who imports all necesary rules by include command.
# Rule all is executed which causes the workflow to generate all the files under all rule input statement.

import os
configfile: "config.yaml"


#just for testing while developing
dirname=".test"
try:
    os.mkdir(dirname)
    print("Directory " , dirname ,  " Created ") 
except FileExistsError:
    print("Directory " , dirname ,  " already exists")


#transform possible string inputs to array
config['work'] = eval('[ config["work"] ]') if type(config['work']) == str else config['work']
print("Work input:", config['work']) 

#check, translate and load predefined workflows in configfile
expand_flag=True
while expand_flag == True:
	expand_flag = False
	work = []
	for v in config['work']:
		if config['dictionary'].get(v) != None and type(config['dictionary'][v]) == list:
			expand_flag = True
			work += config['dictionary'][v]
		elif config['dictionary'].get(v) != None and not type(config['dictionary'][v]) == list:
			expand_flag = True
			for p in list(config['dictionary'][v].keys()):
				work.append(p)
				if config['dictionary'].get(p) == None: 
					config[p]['parameters'].extend(config['dictionary'][v][p])
		else:
			work.append(v)
	config['work'] = work
    

#output translated work configuration    
print("Work to do:", config['work'])
for i in config['work']:
	print(i, "parameters:", config[i]['parameters']) 


#Load required rules
for i in config['work']:
	if i != "" or i!= "none":
		include: "rules/" + i + ".smk"		



SAMPLES=config['in']

rule all:
    input:
        expand("{sample}.{suffix}",sample=SAMPLES,suffix=config['work'][-1])
