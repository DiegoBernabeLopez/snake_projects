# As standard, snakemake workflows execute this snakefile who imports all necesary rules by include command.
# Rule all is executed which causes the workflow to generate all the files under all rule input statement.

import os
configfile: "config.yaml"


#just for testing while developing
dirname=".test"
try:
    os.mkdir(dirname)
    print("Directory " , dirname ,  " Created ") 
except FileExistsError:
    print("Directory " , dirname ,  " already exists")


#Parse work configuration
config['work'] = config["work"].split(",") if type(config['work']) == str else config['work']
print("Work input:", config['work']) 

#Check, translate and load predefined workflows from configfile
expand_flag=True
while expand_flag == True:
    expand_flag = False
    work = []
    for i in config['work']:
        
        #If there is a predefined workflow
        if config['predefined'].get(i) != None:
            expand_flag = True
            
            #If it configures an app
            if type(config['predefined'][i]) == dict:
                work.append(config['predefined'][i]['app'])
                app= config['predefined'][i]['app']   
                config[app]['parameters'].extend(config['predefined'][i]['parameters'])
            
            #If it contains other predefined workflows
            elif type(config['predefined'][i]) == list:
                work += config['predefined'][i]
        
        #If it is not a predefined workflow
        else:
            work.append(i)
    config['work'] = work
    

#output translated work configuration    
print("Work to do:", config['work'])
for i in config['work']:
    print(i, "parameters:", config[i]['parameters']) 


#Load required rules
for i in config['work']:
    if i != "" or i!= "none":
        include: "rules/" + i + ".smk"      



SAMPLES=config['in']

rule all:
    input:
        expand("{sample}.{suffix}",sample=SAMPLES,suffix=config['work'][-1])
