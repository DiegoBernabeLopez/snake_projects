# As standard, snakemake workflows execute this snakefile who imports all necesary rules by include command.
# Rule all is executed which causes the workflow to generate all the files under "all" rule input statement.

### DEPENDENCIES ###

import os
configfile: "config.yaml"
config['metadata'] = {}


### FUNCTIONS ###

#Check, translate and load workflows workflows from configfile
def parser(to_do):
    config['metadata']['input_suffix']=''
    work = []

    for i in to_do:
        #if metaligner [[]]
        if len(i) > 1 and type(i[0]) == str and type(i) == list:
            nxt_sffx=[]
            for j in i:
                rulename = config['workflows'][j]['rule']
                work.append(rulename)
                config['metadata'][rulename] = {}
                config['metadata'][rulename]['parameters']=config['workflows'][j]['parameters']
                config['metadata'][rulename]['isuffix']=config['metadata']['input_suffix']
                config['metadata'][rulename]['osuffix']='.'+rulename+'.metaligner'
                nxt_sffx.append('.'+rulename+'.metaligner')

            config['metadata']['input_suffix']=nxt_sffx
            continue

        #If it is a workflow
        if config['workflows'].get(i) != None:
            expand_flag = True

            #If it configures an rule
            if type(config['workflows'][i]) == dict:
                rulename = config['workflows'][i]['rule']
                work.append(rulename)
                if i not in config['metadata']:
                    config['metadata'][rulename] = {}
                    config['metadata'][rulename]['parameters']=config['workflows'][i]['parameters']
                    config['metadata'][rulename]['isuffix']=config['metadata']['input_suffix']
                    config['metadata'][rulename]['osuffix']='.'+rulename
                    config['metadata']['input_suffix']="." + rulename
            #If it contains other workflows
            elif type(config['workflows'][i]) == list:
                #Recursive parse
                work += parser(config['workflows'][i])

        #If it is another thing
        else:
            work.append(i)
            if i not in config['metadata']:
                raise Exception('%s is not defined in configfile, please use previously defined workflows or define new one' % i)

    return(work)




### CORE ###

#Parse work configuration
config['work'] = config["work"].split(",") if type(config['work']) == str else config['work']
print("Work input:", config['work']) 

#output translate and print work configuration
config['work']=parser(config['work'])

print("Work to do:", config['work'])
for i in config['work']:
    print(i, "parameters:", config['metadata'][i]['parameters']) 


#Load required rules
for i in config['work']:
    if i != "" or i!= "none":
        include: "rules/" + i + ".smk"      


rule all:
    input:
        expand("{sample}{suffix}",sample=config['in'],suffix=config['metadata']['input_suffix'])
